#include "xmlElement.h"
#include <list>
#include <typeinfo>

using namespace std;	


xmlElement::xmlElement(string elName, xmlElement * elOwner, xmlElement * elParentElement)
{
	name = elName;
	owner = elOwner;
	parentElement = elParentElement;
	childElementCount = 0;
}

xmlElement::~xmlElement()
{
}

string xmlElement::getName()
{
	return name;
}

vector<attribute*> xmlElement::getAllAttributes()
{
	return att;
}
	
attribute * xmlElement::getAttribute(int i)
{
	return att[i];
}


int xmlElement::getChildElementCount()
{
	return childElementCount;
}

vector<xmlNode*> xmlElement::getAllChildNode()
{	
	return childNode;
}
	
xmlNode* xmlElement::getChildNode(int i)
{
	return childNode[i];
}

vector<xmlElement*> xmlElement::getAllChildElement()
{
	return childElement;
}

xmlElement* xmlElement::getChildElement(int i)
{
	return childElement[i];
}

xmlElement * xmlElement::getOwner()
{
	return owner;
}
	
xmlElement * xmlElement::getParent()
{
	return parentElement;
}

void xmlElement::setParent(xmlElement * elParent)
{
	parent = elParent;
}
void xmlElement::addAttribute(attribute* elAtt)
{
	att.push_back(elAtt);
}

void xmlElement::addXmlNode(xmlNode * elNode)
{
	childNode.push_back(elNode);
	if (typeid(elNode) == typeid(this))
	{
		childElement.push_back((xmlElement*)elNode);
		childElementCount++;
		elNode.setParent(this);
		elNode.setOwner(this.getOwner());
	}
}

